est_n <- c(table(tmp$idT), table(tmp$idP))[c(1,2,7,3,4,8,9,5)]
paste('N =', sum(est_n))
#transform seed abun data with yeo-johnson transformation from VGAM
#first find lambda value which maximizes normality
#pval is shapiro wilks test for non-normality, so bigger pvals are better
y <- tmp$seed
nn <- length(y)
lltry <- length(ltry)
psi <- matrix(as.numeric(NA), nn, lltry)
ltry <- seq(-0.15, -0.25, len = 1000)  # Try these values of lambda
for (ii in 1:lltry) psi[, ii] <- yeo.johnson(y, lambda = ltry[ii])
colnames(psi) <- c(paste0("lambda_", ltry))
seed_lambda <- reshape2::melt(lapply(apply(psi, 2, shapiro.test), function(x) x$p.value)) %>%
transmute(lambda = as.numeric(gsub('lambda_', "", L1)), pval = value) %>%
filter(pval == max(pval)) %>%
pull(lambda)
paste("best Yeo-Johnson lambda for seedling emergence GLM =", round(seed_lambda,3))
#transform seed abundance data using best lambda
tmp$seed_trans <- yeo.johnson(tmp$seed, lambda = seed_lambda)
#run all the GLMs with different parameters
germNull <-   MASS::glm.nb(germ ~ seed_trans, data = tmp)
germClim <-   MASS::glm.nb(germ ~ seed_trans + temp + precip, data = tmp)
germS <-      MASS::glm.nb(germ ~ seed_trans + temp * id + precip * id, data = tmp)
germT <-      MASS::glm.nb(germ ~ seed_trans + temp + precip + idT, data = tmp)
germP <-      MASS::glm.nb(germ ~ seed_trans + temp + precip + idP, data = tmp)
#REMOVE?
#calculate how many data points occur for each category, useful for later stats
est_n <- c(table(tmp$idT), table(tmp$idP))[c(1,2,7,3,4,8,9,5)]
paste('N =', sum(est_n))
### GLMs to model individuals established
tmp <- filter(j, germ > 0)
#tranform emergence data to normalize it
#first calculate best alpha
y <- tmp$germ
nn <- length(y)
ltry <- seq(-50, 50, len = 1000)  # Try these values of lambda
lltry <- length(ltry)
psi <- matrix(as.numeric(NA), nn, lltry)
for (ii in 1:lltry) psi[, ii] <- yeo.johnson(y, lambda = ltry[ii])
colnames(psi) <- c(paste0("lambda_", ltry))
germ_lambda <- reshape2::melt(lapply(apply(psi, 2, shapiro.test), function(x) x$p.value)) %>%
transmute(lambda = as.numeric(gsub('lambda_', "", L1)), pval = value) %>%
filter(pval == max(pval)) %>%
pull(lambda)
paste("best Yeo-Johnson lambda for emerging seedlings =", round(germ_lambda,3))
tmp$germ_trans <- yeo.johnson(tmp$germ, lambda = germ_lambda)
### GLMs to model individuals established
tmp <- filter(j, germ > 0)
#calculate how many data points occur for each category, useful for later stats
est_n <- c(table(tmp$idT), table(tmp$idP))[c(1,2,7,3,4,8,9,5)]
paste('N =', sum(est_n))
### GLMs to model individuals established
tmp <- filter(j, germ > 0)
#calculate how many data points occur for each category, useful for later stats
est_n <- c(table(tmp$idT), table(tmp$idP))[c(1,2,7,3,4,8,9,5)]
paste('N =', sum(est_n))
plot_it
?pdf
#analysis script for Guittar et al. 2020 in Ecology
#Manuscript title: Quantifying the roles of seed dispersal, filtering, and climate on regional patterns of grassland biodiversity
#Authors: John guittar, Deborah Goldberg, Kari Klanderud, Astrid Berge, Marta Boixaderes,  Eric Meineri, Joachim Topper, Vigdis Vandvik.
#script by John Guittar. For questions email guittarj@gmail.com
#### Setup ####
# set working direction
wd <- '[insert working directory]'
setwd(wd)
# load packages
source("custom_functions.r")
loadpax(pkg = c('grid','knitr','vegan','lme4','tidyverse','gridExtra','kableExtra','ggpubr','lubridate','cowplot','VGAM'))
# load abundance data
x1 <- read.csv("data\\transitions_PersistentSppOccurOnce.csv", stringsAsFactors = FALSE)
x2 <- read.csv("data\\transitions_PersistentSppOccurTwice.csv", stringsAsFactors = FALSE)
x3 <- read.csv("data\\transitions_PersistentSppOccurThrice.csv", stringsAsFactors = FALSE)
x4 <- read.csv("data\\transitions_PersistentSppOccurAlways.csv", stringsAsFactors = FALSE)
#load veg abundance data for all years
cover <- read.csv('data\\cover.csv', header = TRUE, row.names = 1)
#load adult survey metadata, site metadata
cover_meta <- read.csv('data\\cover_meta.csv', header = TRUE, row.names = 1, stringsAsFactors = FALSE)
site_meta <- read.csv("data\\site_meta.csv", stringsAsFactors = FALSE)
# Load species 'dictionary'.
dict <- read.csv("data\\SpeciesCodeDictionary.csv", stringsAsFactors = FALSE)
#Load trait data
traits <- read.csv(file = 'data\\traits.csv', stringsAsFactors = FALSE)
# seed bank data was sampled at a greater area than seedling and seed rain data... so...
# here I randomly subsample the seed bank data (without replacement) down to the fraction (based on area)
# equal to what it should be
frac <- (4 * 0.25^2) / (0.64^2)
x1 <- subbank(x1, frac)
x2 <- subbank(x2, frac)
x3 <- subbank(x3, frac)
x4 <- subbank(x4, frac)
# Create version of data where seed rain and seed bank are merged into one 'seed' category
xS_sp1 <- mergeseeds(x1)
xS_sp2 <- mergeseeds(x2)
xS_sp3 <- mergeseeds(x3)
xS_sp4 <- mergeseeds(x4)
# create versions with and without unidentified 'sp' individuals
# i do this now because it is easy to forget later...
# and in some cases I want to know the total density of seedlings irrespective of species identity
xS1 <- filter(xS_sp1, sp != 'sp')
xS2 <- filter(xS_sp2, sp != 'sp')
xS3 <- filter(xS_sp3, sp != 'sp')
xS4 <- filter(xS_sp4, sp != 'sp')
all_cutoffs <- bind_rows(
mutate(xS1, group = '1/4 local occurrences'),
mutate(xS2, group = '2/4 local occurrences'),
mutate(xS3, group = '3/4 local occurrences'),
mutate(xS4, group = '4/4 local occurrences'))
#for most analyses we will use x3 (persistent = 3 or more occurences)
x_sp <- x3
x <- filter(x3, sp != 'sp')
xS_sp <- xS_sp3
xS <- xS3
# calculate putative climate origins for both versions of data (seed rain and bank separated, and combined)
x_origins <- add_origins(x, 'categorical')
xS_origins <- add_origins(xS, 'categorical')
#trait label names
trait_labs <- c(
leaf.area   = expression('Log Leaf Area ('*mm^2*')'),
max.height  = expression('Log Max'~'Height (m)'),
seed.mass   = expression('Log'~'Seed'~'Mass'~'(mg)'),
sla         = expression('Log SLA ('*m^2*kg^-1*')'),
buds        = expression('Bud'~'Number'),
lat         = expression('Lateral'~'Spread'~'(%)'),
offs        = expression('Offspring'~'(%)'),
conper      = expression('Conn. Persistence'~'(%)')
)
# stage labels and function
stage_lvs <- c(
'rain' = 'Seed rain',
'bank' = 'Seed bank',
'seed' = 'All seeds',
'germ' = 'Emerged',
'est' = 'Established',
'mature' = 'Mature vegetation')
#### GLMS ####
#Note I originally tried to do a zero-inflated negative binomial but it has ~3x df and has a much higher AIC. Thus zero inflated models aren't an inferior choice here.
#A good stack overflow post on glm QC: https://stats.stackexchange.com/questions/70558/diagnostic-plots-for-count-regression
#the strategy here is to do GLMs at three tiers of resolution: (1) species grouped into transient/persistent; (2) species grouped into persistent, same temp/precip, different temp/precip; (3) species grouped into persistent, same temp/precip, warmer/drier, cooler/wetter, unknown temp/precip.
#organize data for models
j <- xS_origins %>%
left_join(site_meta[, c('site','temp','precip')], by = 'site') %>%
mutate(
temp = as.numeric(scale(temp, scale = FALSE)),
precip = as.numeric(scale(precip, scale = FALSE)),
idT = factor(idT, levels = c('Local','Same temperature','Cooler','Warmer','Unknown')),
idP = factor(idP, levels = c('Local','Same precipitation','Drier','Wetter','Unknown'))) %>%
spread(stage, abun, fill = 0)
# remove double zeroes so GLMs work
tmp <- filter(j, !(seed == 0 & germ == 0))
#calculate how many data points occur for each category, useful for later stats
germ_n <- c(table(tmp$idT), table(tmp$idP))[c(1,2,7,3,4,8,9,5)]
paste('N =', sum(germ_n))
#transform seed abun data with yeo-johnson transformation from VGAM
#first find lambda value which maximizes normality
#pval is shapiro wilks test for non-normality, so bigger pvals are better
y <- tmp$seed
nn <- length(y)
ltry <- seq(-0.15, -0.25, len = 1000)  # Try these values of lambda
lltry <- length(ltry)
psi <- matrix(as.numeric(NA), nn, lltry)
for (ii in 1:lltry) psi[, ii] <- yeo.johnson(y, lambda = ltry[ii])
colnames(psi) <- c(paste0("lambda_", ltry))
seed_lambda <- reshape2::melt(lapply(apply(psi, 2, shapiro.test), function(x) x$p.value)) %>%
transmute(lambda = as.numeric(gsub('lambda_', "", L1)), pval = value) %>%
filter(pval == max(pval)) %>%
pull(lambda)
paste("best Yeo-Johnson lambda for seedling emergence GLM =", round(seed_lambda,3))
#transform seed abundance data using best lambda
tmp$seed_trans <- yeo.johnson(tmp$seed, lambda = seed_lambda)
#run all the GLMs with different parameters
germNull <-   MASS::glm.nb(germ ~ seed_trans, data = tmp)
germClim <-   MASS::glm.nb(germ ~ seed_trans + temp + precip, data = tmp)
germS <-      MASS::glm.nb(germ ~ seed_trans + temp * id + precip * id, data = tmp)
germT <-      MASS::glm.nb(germ ~ seed_trans + temp + precip + idT, data = tmp)
germP <-      MASS::glm.nb(germ ~ seed_trans + temp + precip + idP, data = tmp)
### GLMs to model individuals established
tmp <- filter(j, germ > 0)
#calculate how many data points occur for each category, useful for later stats
est_n <- c(table(tmp$idT), table(tmp$idP))[c(1,2,7,3,4,8,9,5)]
paste('N =', sum(est_n))
#tranform emergence data to normalize it
#first calculate best alpha
y <- tmp$germ
nn <- length(y)
ltry <- seq(-50, 50, len = 1000)  # Try these values of lambda
lltry <- length(ltry)
psi <- matrix(as.numeric(NA), nn, lltry)
for (ii in 1:lltry) psi[, ii] <- yeo.johnson(y, lambda = ltry[ii])
colnames(psi) <- c(paste0("lambda_", ltry))
germ_lambda <- reshape2::melt(lapply(apply(psi, 2, shapiro.test), function(x) x$p.value)) %>%
transmute(lambda = as.numeric(gsub('lambda_', "", L1)), pval = value) %>%
filter(pval == max(pval)) %>%
pull(lambda)
paste("best Yeo-Johnson lambda for emerging seedlings =", round(germ_lambda,3))
tmp$germ_trans <- yeo.johnson(tmp$germ, lambda = germ_lambda)
estNull <-    MASS::glm.nb(est ~ germ_trans, data = tmp)
estClim <-    MASS::glm.nb(est ~ germ_trans + temp + precip, data = tmp)
estS <-      MASS::glm.nb(est ~ germ_trans + temp * id + precip * id, data = tmp)
estT <-      MASS::glm.nb(est ~ germ_trans + temp + precip  + idT, data = tmp)
estP <-      MASS::glm.nb(est ~ germ_trans + temp + precip  + idP, data = tmp)
# store coefficients
coefs <- list()
coefs$germNull <- as.data.frame(summary(germNull)$coefficients)
coefs$germClim <- as.data.frame(summary(germClim)$coefficients)
coefs$germS <- as.data.frame(summary(germS)$coefficients)
coefs$germT <- as.data.frame(summary(germT)$coefficients)
coefs$germP <- as.data.frame(summary(germP)$coefficients)
coefs$estNull <- as.data.frame(summary(estNull)$coefficients)
coefs$estClim <- as.data.frame(summary(estClim)$coefficients)
coefs$estS <- as.data.frame(summary(estS)$coefficients)
coefs$estT <- as.data.frame(summary(estT)$coefficients)
coefs$estP <- as.data.frame(summary(estP)$coefficients)
#variable labels for table
myvars <- c(
'seed_trans' = 'Seed no. (transformed)',
'germ_trans' = 'Seedling no. (transformed)',
'temp' = 'Local temp.',
'precip' = 'Local precip.',
'idTransient' = 'Transient',
'temp:idTransient' = 'Transient * Local temp.',
'idTransient:precip' = 'Transient * Local precip.',
'idTSame temperature' = 'Transients from similar temp.',
'idTCooler' = 'Transients from cooler into warmer',
'idTWarmer' = 'Transients from warmer into cooler',
'idTUnknown' = 'Transients from unknown climates',
'idPSame precipitation' = 'Transients from similar precip.',
'idPDrier' = 'Transients from drier into wetter',
'idPWetter' = 'Transients from wetter into drier',
'idPUnknown' = 'Transients from unknown climates'
)
#process/clean coefficients for table 1 etc
mod_coefs <- lapply(coefs, function(x) data.frame(variable = row.names(x), x))
mod_coefs <- do.call(rbind.data.frame, mod_coefs)
mod_coefs$Model <- unlist(lapply(strsplit(row.names(mod_coefs), '\\.'), function(x) x[1]))
mod_coefs <- mod_coefs %>%
filter(!variable %in% c('(Intercept)')) %>%
transmute(
Model,
Variable = myvars[match(variable, names(myvars))],
Estimate = z.value,
p.value = Pr...z..) %>%
arrange(Model, Variable)
#### Main text figures ####
###
fig2_seedsByTemp <- function(){}
#calculate log10 seed density and seed species richness per m2
j <- xS %>%
filter(stage == 'seed') %>%
mutate(den = abun / (4 * 0.25^2)) %>%
group_by(site, id) %>%
summarise(Abundance = sum(den), Richness = length(unique(sp))) %>%
gather(variable, val, -site, -id) %>%
left_join(site_meta[, c('site','temp','precip')], by = 'site') %>%
mutate(id = ifelse(id == 'Persistent', 'Locally-persistent', 'Locally-transient'))
#calculate regression statistics - temperature
#log10 transform abundances for stats because that is how I will show data
stats_temp <- j %>%
mutate(val = ifelse(variable == 'Abundance', log10(val), val)) %>%
group_by(variable, id) %>%
do(model = summary(lm(val ~ temp, data = .))) %>%
mutate(pval = model$coef[[2,4]],
r2 = model$r.squared)
stats_temp
#calculate regression statistics - precipitation
stats_precip <- j %>%
mutate(val = ifelse(variable == 'Abundance', log10(val), val)) %>%
group_by(variable, id) %>%
do(model = summary(lm(val ~ precip, data = .))) %>%
mutate(pval = model$coef[[2,4]],
r2 = model$r.squared)
stats_precip
#add significance to data
j <- j %>%
left_join(stats_temp[, c('id', 'variable', 'pval')], by = c('id','variable')) %>%
mutate(sig = pval < 0.05)
#plot
p <- ggplot(j, aes(x = temp, y = val, color = id)) +
geom_point(aes(shape = id)) +
stat_smooth(aes(lty = sig), method = 'lm', show.legend = FALSE, se = FALSE) +
scale_color_manual(values = c('black','red'), name = '') +
scale_shape_manual(values = c(16,1), name = '') +
scale_x_continuous(breaks = c(6:10)) +
theme_classic() +
theme(
legend.position = 'bottom',
strip.background = element_blank(),
plot.margin = unit(c(0, 0, 0, 0), "pt")) +
labs(x = expression('Mean Summer Temperature ('*degree*'C)'))
myleg <- get_legend(p)
p <- p + theme(legend.position = 'none')
p1 <- p %+% filter(j, variable == 'Abundance') +
scale_linetype_manual(values = c(2,1)) +
scale_y_log10() +
labs(y = expression('Seeds/'*m^2), tag = 'a')
p2 <- p %+% filter(j, variable == 'Richness') +
labs(y = 'Species', tag = 'b')
ps <- plot_grid(p1, p2, align = 'hv')
fig2_seedsByTemp <- plot_grid(ps, myleg, ncol = 1, rel_heights = c(1, .12))
plot_it(fig2_seedsByTemp, name = 'fig2_seedsByTemp', dir = "images\\", width = 6, height = 3.25)
fig2_seedsByTemp
plot_it <- function(plot, name, dir = "", height, width, res = 300) {
# custom function to plot a high quality image.
#to alter quality, increase res
png(filename = paste0(dir, name, '.png'), units = 'in',
type = "cairo", width = width, height = height, res = res)
#only works for ggplot. base plot() is dumb
plot(plot)
papersize <- ifelse(width < 7.5 & height < 10, 'a4',
ifelse(width < 10 & height < 7.5, 'a4r', 'special'))
pdf(file = paste0(dir, name, '.pdf'), width = width, height = height, paper = papersize)
#only works for ggplot. base plot() is dumb
plot(plot)
#close out any lingering devs...
while(dev.cur() != 1) dev.off()
}
plot_it(fig2_seedsByTemp, name = 'fig2_seedsByTemp', dir = "images\\", width = 6, height = 3.25)
fig2_seedsByTemp
##
fig3_transitionProbs <- function(){}
#spread and rename species status (with an extra whitespace to help readability)
j <- xS %>%
spread(stage, abun, fill = 0) %>%
mutate(id = ifelse(id == 'Persistent', ' Locally-persistent ', ' Locally-transient '))
# calculate maximums to use for setting data windows
maxtran <- max(filter(j, id == ' Locally-transient ')$seed)
maxgerm <- max(filter(j, id == ' Locally-transient ')$germ)
p1 <- j %>%
filter(seed <= maxtran) %>%
ggplot(aes(x = seed + 1, y = germ + 1, color = id, fill = id)) +
geom_abline(slope = 1, lty = 3) +
geom_point(aes(x = germ + 1, y = seed + 1), alpha = 0) +
geom_point(alpha = 0.1) +
stat_smooth(aes(x = jitter(seed + 1)), alpha = 0.5, method = 'loess') +
scale_color_manual(values = c('black','red')) +
scale_fill_manual(values = c('black','red')) +
scale_x_log10(breaks = c(1,10,100,1000)) +
scale_y_log10(breaks = c(1,10,100,1000)) +
theme_classic() +
theme(legend.position = 'bottom', legend.title = element_blank()) +
labs(x = 'Seeds + 1', y = 'Emerged Seedlings + 1', tag = 'a')
p2 <- j %>%
filter(germ > 0) %>%
filter(germ <= maxgerm) %>%
ggplot(aes(x = germ + 1, y = est + 1, color = id, fill = id)) +
geom_point(alpha = 0.1) +
geom_abline(slope = 1, lty = 3) +
stat_smooth(method = 'loess') +
scale_color_manual(values = c('black','red')) +
scale_fill_manual(values = c('black','red')) +
scale_x_log10(breaks = c(2,10)) +
scale_y_log10() +
theme_classic() +
theme(legend.position = 'bottom', legend.title = element_blank()) +
labs(x = 'Emerged seedlings + 1', y = 'Established seedlings + 1', tag = 'b')
fig3_transitionProbs <- ggarrange(p1, p2, ncol = 2, common.legend = TRUE, legend = 'bottom')
plot_it(fig3_transitionProbs, name = 'fig3_transitionProbs', dir = "images\\", width = 6.5, height = 3.5)
fig3_transitionProbs
###
fig4_traitsBiplots <- function(){}
#calculate community means, using combined seed rain seed bank
j <- xS %>%
left_join(traits, by = 'sp') %>%
gather(trait, val, seed.mass, sla, leaf.area, max.height, conper, offs, lat,  buds) %>%
mutate(trait = factor(trait_labs[match(trait, names(trait_labs))], levels = trait_labs)) %>%
filter(stage == 'seed') %>%
ungroup() %>%
group_by(site, stage, trait, id) %>%
summarise(cm = mean(val, na.rm = T)) %>%
group_by(site, stage, trait) %>%
spread(id, cm) %>%
filter(!is.na(Transient + Persistent)) %>%
mutate(diff = Persistent - Transient) %>%
left_join(site_meta, by = c("site"))
#test for trend in difference with temp + precip, to see if trait-based filtering varies with climate
mods.lm <- j %>%
group_by(trait, stage) %>%
do(mod = summary(lm(diff ~ temp + precip, data = .))) %>%
mutate(p.temp = mod$coefficients[[12]],
t.temp = mod$coefficients[[11]],
mod = NULL)
#now do t-tests to see if transient and persistent spp groups differ
mods <- j %>%
group_by(trait, stage) %>%
do(mod = t.test(.$Transient, .$Persistent, paired = TRUE)) %>%
mutate(pval = mod$p.value) %>%
left_join(mods.lm, by = c("trait", "stage"))
#add modeling statistics to dataframe j.
#factorize climate to match figure 1 plotting scheme
j <- j %>%
left_join(mods[, c('trait','stage','pval')], by = c("trait", "stage")) %>%
mutate(sig = ifelse(pval < 0.05, '*', NA)) %>%
ungroup() %>%
mutate(sig = ifelse(is.na(sig), 'p > 0.05', 'p < 0.05')) %>%
mutate(MST = factor(c(6,9,10.5)[match(temp.level, c(1:3))], levels = c(6,9,10.5)),
MAP = factor(c(650,1300,2000,2900)[match(precip.level, c(1:4))], levels = c(650,1300,2000,2900)))
fig4_traitsBiplots <- ggplot(j, aes(x = Persistent, y = Transient)) +
geom_abline(slope = 1, lty = 3) +
geom_point(aes(color = MAP, fill = interaction(sig, MAP), shape = MST), size = 3, alpha = 0.8) +
geom_point(aes(y = Persistent, x = Transient), alpha = 0) +
scale_color_manual(values = c('#87CEEB', '#749ED5', '#5057B2', '#140D8F')) +
scale_fill_manual(values = c('#87CEEB', 'transparent', '#749ED5', 'transparent', '#5057B2', 'transparent', '#140D8F', 'transparent')) +
scale_y_continuous(labels = scaleFUN) +
scale_x_continuous(labels = scaleFUN) +
scale_shape_manual(values = c(24,21,25)) +
facet_wrap(~trait, scales = 'free', ncol = 4, labeller = label_parsed) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
labs(x = 'Trait mean of locally-persistent species', y = 'Trait mean of locally-transient species')
plot_it(fig4_traitsBiplots, name = 'fig4_traitsBiplots', dir = "images\\", width = 7, height = 3.75)
fig4_traitsBiplots
##
fig3_transitionProbs <- function(){}
#spread and rename species status (with an extra whitespace to help readability)
j <- xS %>%
spread(stage, abun, fill = 0) %>%
mutate(id = ifelse(id == 'Persistent', ' Locally-persistent ', ' Locally-transient '))
# calculate maximums to use for setting data windows
maxtran <- max(filter(j, id == ' Locally-transient ')$seed)
maxgerm <- max(filter(j, id == ' Locally-transient ')$germ)
p1 <- j %>%
filter(seed <= maxtran) %>%
ggplot(aes(x = seed + 1, y = germ + 1, color = id, fill = id)) +
geom_abline(slope = 1, lty = 3) +
geom_point(aes(x = germ + 1, y = seed + 1), alpha = 0) +
geom_point(alpha = 0.1) +
stat_smooth(aes(x = jitter(seed + 1)), alpha = 0.5, method = 'loess') +
scale_color_manual(values = c('black','red')) +
scale_fill_manual(values = c('black','red')) +
scale_x_log10(breaks = c(1,10,100,1000)) +
scale_y_log10(breaks = c(1,10,100,1000)) +
theme_classic() +
theme(legend.position = 'bottom', legend.title = element_blank()) +
labs(x = 'Seeds + 1', y = 'Emerged Seedlings + 1', tag = 'a')
p2 <- j %>%
filter(germ > 0) %>%
filter(germ <= maxgerm) %>%
ggplot(aes(x = germ + 1, y = est + 1, color = id, fill = id)) +
geom_point(alpha = 0.1) +
geom_abline(slope = 1, lty = 3) +
stat_smooth(method = 'loess') +
scale_color_manual(values = c('black','red')) +
scale_fill_manual(values = c('black','red')) +
scale_x_log10(breaks = c(2,10)) +
scale_y_log10() +
theme_classic() +
theme(legend.position = 'bottom', legend.title = element_blank()) +
labs(x = 'Emerged seedlings + 1', y = 'Established seedlings + 1', tag = 'b')
fig3_transitionProbs <- ggarrange(p1, p2, ncol = 2, common.legend = TRUE, legend = 'bottom')
plot_it(fig3_transitionProbs, name = 'fig3_transitionProbs', dir = "images\\", width = 6.5, height = 3.5)
fig3_transitionProbs
###
fig4_traitsBiplots <- function(){}
#calculate community means, using combined seed rain seed bank
j <- xS %>%
left_join(traits, by = 'sp') %>%
gather(trait, val, seed.mass, sla, leaf.area, max.height, conper, offs, lat,  buds) %>%
mutate(trait = factor(trait_labs[match(trait, names(trait_labs))], levels = trait_labs)) %>%
filter(stage == 'seed') %>%
ungroup() %>%
group_by(site, stage, trait, id) %>%
summarise(cm = mean(val, na.rm = T)) %>%
group_by(site, stage, trait) %>%
spread(id, cm) %>%
filter(!is.na(Transient + Persistent)) %>%
mutate(diff = Persistent - Transient) %>%
left_join(site_meta, by = c("site"))
#test for trend in difference with temp + precip, to see if trait-based filtering varies with climate
mods.lm <- j %>%
group_by(trait, stage) %>%
do(mod = summary(lm(diff ~ temp + precip, data = .))) %>%
mutate(p.temp = mod$coefficients[[12]],
t.temp = mod$coefficients[[11]],
mod = NULL)
#now do t-tests to see if transient and persistent spp groups differ
mods <- j %>%
group_by(trait, stage) %>%
do(mod = t.test(.$Transient, .$Persistent, paired = TRUE)) %>%
mutate(pval = mod$p.value) %>%
left_join(mods.lm, by = c("trait", "stage"))
#add modeling statistics to dataframe j.
#factorize climate to match figure 1 plotting scheme
j <- j %>%
left_join(mods[, c('trait','stage','pval')], by = c("trait", "stage")) %>%
mutate(sig = ifelse(pval < 0.05, '*', NA)) %>%
ungroup() %>%
mutate(sig = ifelse(is.na(sig), 'p > 0.05', 'p < 0.05')) %>%
mutate(MST = factor(c(6,9,10.5)[match(temp.level, c(1:3))], levels = c(6,9,10.5)),
MAP = factor(c(650,1300,2000,2900)[match(precip.level, c(1:4))], levels = c(650,1300,2000,2900)))
fig4_traitsBiplots <- ggplot(j, aes(x = Persistent, y = Transient)) +
geom_abline(slope = 1, lty = 3) +
geom_point(aes(color = MAP, fill = interaction(sig, MAP), shape = MST), size = 3, alpha = 0.8) +
geom_point(aes(y = Persistent, x = Transient), alpha = 0) +
scale_color_manual(values = c('#87CEEB', '#749ED5', '#5057B2', '#140D8F')) +
scale_fill_manual(values = c('#87CEEB', 'transparent', '#749ED5', 'transparent', '#5057B2', 'transparent', '#140D8F', 'transparent')) +
scale_y_continuous(labels = scaleFUN) +
scale_x_continuous(labels = scaleFUN) +
scale_shape_manual(values = c(24,21,25)) +
facet_wrap(~trait, scales = 'free', ncol = 4, labeller = label_parsed) +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
legend.position = 'none') +
labs(x = 'Trait mean of locally-persistent species', y = 'Trait mean of locally-transient species')
plot_it(fig4_traitsBiplots, name = 'fig4_traitsBiplots', dir = "images\\", width = 7, height = 3.75)
fig4_traitsBiplots
